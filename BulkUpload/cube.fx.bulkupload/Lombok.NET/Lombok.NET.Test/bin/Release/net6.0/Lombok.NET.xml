<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lombok.NET</name>
    </assembly>
    <members>
        <member name="T:Lombok.NET.Analyzers.AsyncMethodMustBeInPartialClassOrStructAnalyzer">
            <summary>
            Analyzer which makes sure that methods marked with the [Async] attribute are withing a partial class or partial struct.
            </summary>
        </member>
        <member name="M:Lombok.NET.Analyzers.AsyncMethodMustBeInPartialClassOrStructAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <summary>
            Initializes the analyzer.
            </summary>
            <param name="context">The context of analysis.</param>
        </member>
        <member name="P:Lombok.NET.Analyzers.AsyncMethodMustBeInPartialClassOrStructAnalyzer.SupportedDiagnostics">
            <summary>
            Diagnostics supported/raised by this analyzer.
            </summary>
        </member>
        <member name="T:Lombok.NET.Analyzers.DiagnosticDescriptors">
            <summary>
            Contains definitions of diagnostics which can be raised by Lombok.NET.
            </summary>
        </member>
        <member name="F:Lombok.NET.Analyzers.DiagnosticDescriptors.TypeMustBePartial">
            <summary>
            Raised when a type is not partial although it should be.
            </summary>
        </member>
        <member name="F:Lombok.NET.Analyzers.DiagnosticDescriptors.TypeMustBeNonNested">
            <summary>
            Raised when a type is within another type although it should not be.
            </summary>
        </member>
        <member name="F:Lombok.NET.Analyzers.DiagnosticDescriptors.TypeMustHaveNamespace">
            <summary>
            Raised when a type is not within a namespace although it should be.
            </summary>
        </member>
        <member name="F:Lombok.NET.Analyzers.DiagnosticDescriptors.AsyncMethodMustBeInClassOrStruct">
            <summary>
            Raised when a method is not within a class or a struct although it should be.
            </summary>
        </member>
        <member name="F:Lombok.NET.Analyzers.DiagnosticDescriptors.PropertyFieldMustBeInClassOrStruct">
            <summary>
            Raised when a field is not within a class or a struct although it should be.
            </summary>
        </member>
        <member name="T:Lombok.NET.Analyzers.MustBePartialCodeFix">
            <summary>
            Code fix for types which need to be partial. Simply adds the partial modifier to the type declaration.
            </summary>
        </member>
        <member name="M:Lombok.NET.Analyzers.MustBePartialCodeFix.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)">
            <summary>
            Registers the code fix.
            </summary>
            <param name="context">The context of registration.</param>
        </member>
        <member name="M:Lombok.NET.Analyzers.MustBePartialCodeFix.GetFixAllProvider">
            <summary>
            Supplies a fix all provider.
            </summary>
            <returns>A batch fixer.</returns>
        </member>
        <member name="P:Lombok.NET.Analyzers.MustBePartialCodeFix.FixableDiagnosticIds">
            <summary>
            Diagnostics which can be fixed by this analyzer.
            </summary>
        </member>
        <member name="T:Lombok.NET.ConstructorGenerators.AllArgsConstructorGenerator">
            <summary>
            Generates a constructor which takes all of the members as arguments.
            An all-arguments constructor is basically just a required-arguments constructor where all the members are required.
            </summary>
        </member>
        <member name="P:Lombok.NET.ConstructorGenerators.AllArgsConstructorGenerator.AttributeName">
            <summary>
            The name (as used in user code) of the attribute this generator targets.
            </summary>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.AllArgsConstructorGenerator.IsPropertyRequired(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            Specifies if the property is considered required. In the case of the AllArgsConstructor, this is always the case. 
            </summary>
            <returns>Always true.</returns>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.AllArgsConstructorGenerator.IsFieldRequired(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)">
            <summary>
            Specifies if the field is considered required. In the case of the AllArgsConstructor, this is always the case. 
            </summary>
            <returns>Always true.</returns>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.AllArgsConstructorGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the type symbol for the targeted attribute.
            </summary>
            <param name="model">The semantic model to retrieve the symbol from.</param>
            <returns>The attribute's type symbol.</returns>
        </member>
        <member name="T:Lombok.NET.ConstructorGenerators.BaseConstructorGenerator">
            <summary>
            Base class for source generators which generate constructors.
            </summary>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.BaseConstructorGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes this generator.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.BaseConstructorGenerator.GetConstructorParts(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Gets the to-be-generated constructor's parameters as well as its body.
            </summary>
            <param name="typeDeclaration">The type declaration to generate the parts for.</param>
            <returns>The constructor's parameters and its body.</returns>
        </member>
        <member name="P:Lombok.NET.ConstructorGenerators.BaseConstructorGenerator.AttributeName">
            <summary>
            class HiddenAttribute : Attribute
            
            ->
            
            "Hidden"
            </summary>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.BaseConstructorGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the type symbol for the targeted attribute.
            </summary>
            <param name="model">The semantic model to retrieve the symbol from.</param>
            <returns>The attribute's type symbol.</returns>
        </member>
        <member name="T:Lombok.NET.ConstructorGenerators.NoArgsConstructorGenerator">
            <summary>
            Generator which generates an empty constructor. No parameters, no body.
            </summary>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.NoArgsConstructorGenerator.GetConstructorParts(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Gets the to-be-generated constructor's parameters as well as its body.
            </summary>
            <returns>The constructor's parameters and its body.</returns>
        </member>
        <member name="P:Lombok.NET.ConstructorGenerators.NoArgsConstructorGenerator.AttributeName">
            <summary>
            The name (as used in user code) of the attribute this generator targets.
            </summary>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.NoArgsConstructorGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the type symbol for the targeted attribute.
            </summary>
            <param name="model">The semantic model to retrieve the symbol from.</param>
            <returns>The attribute's type symbol.</returns>
        </member>
        <member name="T:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator">
            <summary>
            Generates a constructor which takes all of the required members as arguments.
            "Required" is defined differently depending on the type of the member:
            - A property is considered required when there is no set accessor.
            - A field is considered required when the <code>readonly</code> keyword has been applied to it.
            </summary>
        </member>
        <member name="P:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator.AttributeName">
            <summary>
            The name (as used in user code) of the attribute this generator targets.
            </summary>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the type symbol for the targeted attribute.
            </summary>
            <param name="model">The semantic model to retrieve the symbol from.</param>
            <returns>The attribute's type symbol.</returns>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator.GetConstructorParts(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Gets the to-be-generated constructor's parameters as well as its body.
            </summary>
            <param name="typeDeclaration">The type declaration to generate the parts for.</param>
            <returns>The constructor's parameters and its body.</returns>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator.IsPropertyRequired(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            Specifies if the property is considered required. 
            </summary>
            <returns>True, if the property does not have a setter.</returns>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator.IsFieldRequired(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)">
            <summary>
            Specifies if the field is considered required. 
            </summary>
            <returns>True, if the field is marked as readonly.</returns>
        </member>
        <member name="M:Lombok.NET.ConstructorGenerators.RequiredArgsConstructorGenerator.GetConstructorParts(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String}},System.Func{System.String,System.String})">
            <summary>
            Gets the constructor's parameters as well as its body.
            </summary>
            <param name="members">The type's members split into type and name.</param>
            <param name="parameterTransformer">A function for transforming the member's name into the name which will be used for the constructor.</param>
            <returns>The constructor's parameters as well as its body.</returns>
        </member>
        <member name="T:Lombok.NET.DecoratorGenerator">
            <summary>
            Generator which generates the decorator subclasses for abstract classes or interfaces.
            </summary>
        </member>
        <member name="M:Lombok.NET.DecoratorGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.Extensions.IncrementalGeneratorInitializationContextExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/>.
            </summary>
        </member>
        <member name="M:Lombok.NET.Extensions.IncrementalGeneratorInitializationContextExtensions.AddSources(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValuesProvider{Lombok.NET.GeneratorResult})">
            <summary>
            Checks if the result is erroneous and if a diagnostic needs to be raised. If not, it adds the source to the compilation.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
        </member>
        <member name="T:Lombok.NET.Extensions.StringExtensions">
            <summary>
            Extension methods for string-related operations.
            </summary>
        </member>
        <member name="M:Lombok.NET.Extensions.StringExtensions.Decapitalize(System.String)">
            <summary>
            Lowercases the first character of a given string.
            </summary>
            <param name="s">The string whose first character to lowercase.</param>
            <returns>The string with its first character lowercased.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.StringExtensions.Capitalize(System.String)">
            <summary>
            Uppercases the first character of a given string.
            </summary>
            <param name="s">The string whose first character to uppercase.</param>
            <returns>The string with its first character uppercased.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.StringExtensions.EscapeReservedKeyword(System.String)">
            <summary>
            Escapes a reserved keyword which should be used as an identifier.
            </summary>
            <param name="identifier">The identifier to be used.</param>
            <returns>A valid identifier.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.StringExtensions.ToPascalCaseIdentifier(System.String)">
            <summary>
            Ensures normal PascalCase for an identifier. (e.g. "_age" becomes "Age").
            </summary>
            <param name="identifier">The identifier to get the property name for.</param>
            <returns>A PascalCase identifier.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.StringExtensions.ToCamelCaseIdentifier(System.String)">
            <summary>
            Transforms an identifier to camelCase. (e.g. "_myAge" -> "myAge", "MyAge" -> "myAge").
            </summary>
            <param name="identifier">The identifier to transform.</param>
            <returns>A camelCase identifier.</returns>
        </member>
        <member name="T:Lombok.NET.Extensions.SymbolCache">
            <summary>
            A cache of type symbols.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.AllArgsConstructorAttributeSymbol">
            <summary>
            The symbol for the [AllArgsConstructor] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.NoArgsConstructorAttributeSymbol">
            <summary>
            The symbol for the [NoArgsConstructor] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.RequiredArgsConstructorAttributeSymbol">
            <summary>
            The symbol for the [RequiredArgsConstructor] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.AsyncAttributeSymbol">
            <summary>
            The symbol for the [Async] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.AsyncOverloadsAttributeSymbol">
            <summary>
            The symbol for the [AsyncOverloads] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.ToStringAttributeSymbol">
            <summary>
            The symbol for the [ToString] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.WithAttributeSymbol">
            <summary>
            The symbol for the [With] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.NotifyPropertyChangedAttributeSymbol">
            <summary>
            The symbol for the [NotifyPropertyChanged] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.NotifyPropertyChangingAttributeSymbol">
            <summary>
            The symbol for the [NotifyPropertyChanging] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.PropertyAttributeSymbol">
            <summary>
            The symbol for the [Property] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.SingletonAttributeSymbol">
            <summary>
            The symbol for the [Singleton] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.DecoratorAttributeSymbol">
            <summary>
            The symbol for the [Decorator] attribute.
            </summary>
        </member>
        <member name="F:Lombok.NET.Extensions.SymbolCache.LazyAttributeSymbol">
            <summary>
            The symbol for the [Lazy] attribute.
            </summary>
        </member>
        <member name="T:Lombok.NET.Extensions.SymbolExtensions">
            <summary>
            Extension methods for symbol-related operations.
            </summary>
        </member>
        <member name="M:Lombok.NET.Extensions.SymbolExtensions.HasAttribute(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Checks if a symbol represents a type which is marked with the specified attribute.
            </summary>
            <param name="symbol">The symbol to check.</param>
            <param name="attribute">The attribute to look for.</param>
            <returns>True, if the type is marked with the attribute.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SymbolExtensions.GetSymbolByType``1(Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Gets the symbol for a type.
            </summary>
            <param name="compilation">The compilation to retrieve the symbol from.</param>
            <typeparam name="T">The type for retrieve the symbol for.</typeparam>
            <returns>The type's symbol.</returns>
            <exception cref="T:System.TypeAccessException">If the type cannot be found in the specified compilation.</exception>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.GetNamespace(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Traverses a syntax node upwards until it reaches a <code>NamespaceDeclarationSyntax</code>.
            </summary>
            <param name="node">The syntax node to traverse.</param>
            <returns>The namespace this syntax node is in. <code>null</code> if a namespace cannot be found.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.GetUsings(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets the using directives from a SyntaxNode. Traverses the tree upwards until it finds using directives.
            </summary>
            <param name="node">The staring point.</param>
            <returns>A list of using directives.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.GetAttributeArgument``1(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.String)">
            <summary>
            Gets the argument value from an attribute by type.
            </summary>
            <param name="memberDeclaration">The member which is marked with the attribute.</param>
            <param name="attributeName">The name of the argument containing the argument.</param>
            <typeparam name="T">The type of the argument.</typeparam>
            <returns>The argument value.</returns>
            <exception cref="T:System.Exception">If the argument cannot be found on the member.</exception>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.GetAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax)">
            <summary>
            Gets the accessibility modifier for a type declaration.
            </summary>
            <param name="typeDeclaration">The type declaration's accessibility modifier to find.</param>
            <returns>The types accessibility modifier.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.ContainsAttribute(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Checks if a node is marked with a specific attribute.
            </summary>
            <param name="node">The node to check.</param>
            <param name="semanticModel">The semantic model.</param>
            <param name="attributeSymbol">The attributes symbol.</param>
            <returns>True, if the node is marked with the attribute.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.CreateNewPartialType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Constructs a new partial type from the original type's name, accessibility and type arguments.
            </summary>
            <param name="typeDeclaration">The type to clone.</param>
            <returns>A new partial type with a few of the original types traits.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.CreateNewPartialClass(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Constructs a new partial class from the original type's name, accessibility and type arguments.
            </summary>
            <param name="type">The type to clone.</param>
            <returns>A new partial class with a few of the original types traits.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.CreateNewPartialStruct(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Constructs a new partial struct from the original type's name, accessibility and type arguments.
            </summary>
            <param name="type">The type to clone.</param>
            <returns>A new partial struct with a few of the original types traits.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.CreateNewPartialInterface(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Constructs a new partial interface from the original type's name, accessibility and type arguments.
            </summary>
            <param name="type">The type to clone.</param>
            <returns>A new partial interface with a few of the original types traits.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.IsVoid(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)">
            <summary>
            Checks if a TypeSyntax represents void.
            </summary>
            <param name="typeSyntax">The TypeSyntax to check.</param>
            <returns>True, if the type represents void.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.IsNestedType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Checks if a type is declared as a nested type.
            </summary>
            <param name="typeDeclaration">The type to check.</param>
            <returns>True, if the type is declared within another type.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.TryValidateType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax,System.String@,Microsoft.CodeAnalysis.Diagnostic@)">
            <summary>
            Determines if the type is eligible for code generation.
            </summary>
            <param name="typeDeclaration">The type to check for.</param>
            <param name="namespace">The type's namespace. Will be set in this method.</param>
            <param name="diagnostic">A diagnostic to be emitted if the type is not valid.</param>
            <returns>True, if code can be generated for this type.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.CreateUsingDirective(System.String)">
            <summary>
            Creates a using directive from a string.
            </summary>
            <param name="usingQualifier">The name of the using directive.</param>
            <returns>A using directive.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.IsNamed(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,System.String)">
            <summary>
            Checks if the name of an attribute matches a given name.
            </summary>
            <param name="attribute">The attribute to check.</param>
            <param name="name">The name to check against.</param>
            <returns>True, if the attribute's name matches.</returns>
        </member>
        <member name="M:Lombok.NET.Extensions.SyntaxNodeExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},Lombok.NET.AccessTypes)">
            <summary>
            Removes all the members which do not have the desired access modifier.
            </summary>
            <param name="members">The members to filter</param>
            <param name="accessType">The access modifer to look out for.</param>
            <typeparam name="T">The type of the members (<code>PropertyDeclarationSyntax</code>/<code>FieldDeclarationSyntax</code>).</typeparam>
            <returns>The members which have the desired access modifier.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If an access modifier is supplied which is not supported.</exception>
        </member>
        <member name="T:Lombok.NET.GeneratorResult">
            <summary>
            The result class for incremental generators. Either contains source code or a diagnostic which should be raised.
            </summary>
        </member>
        <member name="P:Lombok.NET.GeneratorResult.TypeName">
            <summary>
            The name of the generated type.
            </summary>
        </member>
        <member name="P:Lombok.NET.GeneratorResult.Source">
            <summary>
            The SourceText of the generated code.
            </summary>
        </member>
        <member name="P:Lombok.NET.GeneratorResult.Diagnostic">
            <summary>
            The diagnostic to be raised if something went wrong.
            </summary>
        </member>
        <member name="P:Lombok.NET.GeneratorResult.IsValid">
            <summary>
            Determines if the result is valid and can be added to the compilation or if the diagnostic needs to be raised.
            </summary>
        </member>
        <member name="P:Lombok.NET.GeneratorResult.Empty">
            <summary>
            An empty result. Something went wrong, however no diagnostic should be reported
            </summary>
        </member>
        <member name="M:Lombok.NET.GeneratorResult.#ctor(System.String,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Constructor to be used in case of success.
            </summary>
            <param name="typeName">The name of the generated type.</param>
            <param name="source">The source of the generated code.</param>
        </member>
        <member name="M:Lombok.NET.GeneratorResult.#ctor(Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Constructor to be used in case of failure.
            </summary>
            <param name="diagnostic">The diagnostic to be raised.</param>
        </member>
        <member name="T:Lombok.NET.MethodGenerators.AsyncGenerator">
            <summary>
            Generator which generates async versions of methods.
            </summary>
        </member>
        <member name="M:Lombok.NET.MethodGenerators.AsyncGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.MethodGenerators.AsyncOverloadsGenerator">
            <summary>
            Generator which generated async overloads for abstract or interface methods.
            </summary>
        </member>
        <member name="M:Lombok.NET.MethodGenerators.AsyncOverloadsGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.MethodGenerators.ToStringGenerator">
            <summary>
            Generator which generates a ToString implementation for a type.
            </summary>
        </member>
        <member name="M:Lombok.NET.MethodGenerators.ToStringGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.MethodGenerators.ToTextGenerator">
            <summary>
            Generator which generates a ToString implementation for an enum. The method is called ToText, as the ToString method cannot be overriden through code generation.
            </summary>
        </member>
        <member name="M:Lombok.NET.MethodGenerators.ToTextGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.MethodGenerators.WithMethodsGenerator">
            <summary>
            Generator which generates With builder methods for a class.
            </summary>
        </member>
        <member name="M:Lombok.NET.MethodGenerators.WithMethodsGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.PredicateBuilder">
            <summary>
            Builds a predicate by chaining multiple conditions.
            </summary>
        </member>
        <member name="M:Lombok.NET.PredicateBuilder.True``1">
            <summary>
            Returns an expression which is always true.
            </summary>
            <typeparam name="T">The type this predicate targets.</typeparam>
            <returns>An always-true predicate.</returns>
        </member>
        <member name="M:Lombok.NET.PredicateBuilder.False``1">
            <summary>
            Returns an expression which is always false.
            </summary>
            <typeparam name="T">The type this predicate targets.</typeparam>
            <returns>An always-false predicate.</returns>
        </member>
        <member name="M:Lombok.NET.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Adds a new condition to the chain and combines it using an OR expression.
            </summary>
            <param name="expr1">The existing predicate chain.</param>
            <param name="expr2">The predicate to add.</param>
            <typeparam name="T">The type this predicate targets.</typeparam>
            <returns>A new predicate with an additional OR predicate.</returns>
        </member>
        <member name="M:Lombok.NET.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Adds a new condition to the chain and combines it using an AND expression.
            </summary>
            <param name="expr1">The existing predicate chain.</param>
            <param name="expr2">The predicate to add.</param>
            <typeparam name="T">The type this predicate targets.</typeparam>
            <returns>A new predicate with an additional AND predicate.</returns>
        </member>
        <member name="T:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator">
            <summary>
            Base class for generators which generate property change functionality.
            </summary>
        </member>
        <member name="P:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.ImplementingInterfaceName">
            <summary>
            The name of the interface which dictates the property change contracts and which will be implemented.
            </summary>
        </member>
        <member name="P:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.AttributeName">
            <summary>
            The name of the attribute the generator targets.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.CreateAssignmentWithPropertyChangeMethod(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Creates the body of the method which sets a field and raises the event.
            This is important for the order in which these two statements can happen
            </summary>
            <param name="newValueAssignment"></param>
            <returns>A list of statements which the method executes.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.CreateEventField">
            <summary>
            Creates the event field.
            </summary>
            <returns>The event field.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.CreateSetFieldMethod">
            <summary>
            Creates the method which contains the event invocation plus allows the setting of a field.
            </summary>
            <returns>The method definition.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.BasePropertyChangeGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the symbol associated with the attribute this generator targets.
            </summary>
            <param name="semanticModel">The semantic mode to retrieve the symbol from.</param>
            <returns>The symbol associated with the attribute this generator targets.</returns>
        </member>
        <member name="T:Lombok.NET.PropertyGenerators.LazyGenerator">
            <summary>
            Generator which generates a <see cref="T:System.Lazy`1"/> property for a class.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.LazyGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator">
            <summary>
            Generator which implements the INotifyPropertyChanged interface for a class.
            </summary>
        </member>
        <member name="F:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.SetFieldMethodName">
            <summary>
            The name of the method which will be available for setting a field and raising the event.
            </summary>
        </member>
        <member name="P:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.ImplementingInterfaceName">
            <summary>
            The name of the interface which dictates the property change contracts and which will be implemented.
            </summary>
        </member>
        <member name="P:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.AttributeName">
            <summary>
            The name of the attribute the generator targets.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.CreateAssignmentWithPropertyChangeMethod(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Creates the body of the method which sets a field and raises the event.
            This is important for the order in which these two statements can happen
            </summary>
            <param name="newValueAssignment"></param>
            <returns>A list of statements which the method executes.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.CreateEventField">
            <summary>
            Creates the event field.
            </summary>
            <returns>The event field.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.CreateSetFieldMethod">
            <summary>
            Creates the method which contains the event invocation plus allows the setting of a field.
            </summary>
            <returns>The method definition.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangedGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the symbol associated with the attribute this generator targets.
            </summary>
            <param name="semanticModel">The semantic mode to retrieve the symbol from.</param>
            <returns>The symbol associated with the attribute this generator targets.</returns>
        </member>
        <member name="T:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator">
            <summary>
            Generator which implements the INotifyPropertyChanged interface for a class.
            </summary>
        </member>
        <member name="F:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.SetFieldMethodName">
            <summary>
            The name of the method which will be available for setting a field and raising the event.
            </summary>
        </member>
        <member name="P:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.ImplementingInterfaceName">
            <summary>
            The name of the attribute the generator targets.
            </summary>
        </member>
        <member name="P:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.AttributeName">
            <summary>
            The name of the attribute the generator targets.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.CreateAssignmentWithPropertyChangeMethod(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Creates the body of the method which sets a field and raises the event.
            This is important for the order in which these two statements can happen
            </summary>
            <param name="newValueAssignment"></param>
            <returns>A list of statements which the method executes.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.GetAttributeSymbol(Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Gets the symbol associated with the attribute this generator targets.
            </summary>
            <param name="semanticModel">The semantic mode to retrieve the symbol from.</param>
            <returns>The symbol associated with the attribute this generator targets.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.CreateEventField">
            <summary>
            Creates the event field.
            </summary>
            <returns>The event field.</returns>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.NotifyPropertyChangingGenerator.CreateSetFieldMethod">
            <summary>
            Creates the method which contains the event invocation plus allows the setting of a field.
            </summary>
            <returns>The method definition.</returns>
        </member>
        <member name="T:Lombok.NET.PropertyGenerators.PropertyGenerator">
            <summary>
            Generator which generates properties from fields.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.PropertyGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.PropertyGenerators.SingletonGenerator">
            <summary>
            Generator which generates the singleton pattern for a class.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyGenerators.SingletonGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the generator logic.
            </summary>
            <param name="context">The context of initializing the generator.</param>
        </member>
        <member name="T:Lombok.NET.AllArgsConstructorAttribute">
            <summary>
            Tells Lombok.NET to generate an AllArgsConstructor for this type. 
            </summary>
        </member>
        <member name="M:Lombok.NET.AllArgsConstructorAttribute.#ctor">
            <summary>
            Empty constructor. Private fields will included in the constructor.
            </summary>
        </member>
        <member name="M:Lombok.NET.AllArgsConstructorAttribute.#ctor(Lombok.NET.MemberType)">
            <summary>
            Allows specifying which private members (fields or properties) will be included in the constructor.
            </summary>
            <param name="memberType">The member type to include.</param>
        </member>
        <member name="M:Lombok.NET.AllArgsConstructorAttribute.#ctor(Lombok.NET.AccessTypes)">
            <summary>
            Allows specifying fields of which access type (public, protected etc.) will be included in the constructor.
            </summary>
            <param name="accessType">The access type of fields to include.</param>
        </member>
        <member name="M:Lombok.NET.AllArgsConstructorAttribute.#ctor(Lombok.NET.MemberType,Lombok.NET.AccessTypes)">
            <summary>
            Allows specifying members (fields or properties) of which access type (public, protected etc.) will be included in the constructor.
            </summary>
            <param name="memberType">The member type to include.</param>
            <param name="accessType">The access type of fields to include.</param>
        </member>
        <member name="T:Lombok.NET.RequiredArgsConstructorAttribute">
            <summary>
            Tells Lombok.NET to generate a RequiredArgsConstructor for this type. 
            </summary>
        </member>
        <member name="M:Lombok.NET.RequiredArgsConstructorAttribute.#ctor">
            <summary>
            Empty constructor. Readonly private fields will included in the constructor.
            </summary>
        </member>
        <member name="M:Lombok.NET.RequiredArgsConstructorAttribute.#ctor(Lombok.NET.MemberType)">
            <summary>
            Allows specifying which private members (fields or properties) will be included in the constructor.
            </summary>
            <param name="memberType">The member type to include.</param>
        </member>
        <member name="M:Lombok.NET.RequiredArgsConstructorAttribute.#ctor(Lombok.NET.AccessTypes)">
            <summary>
            Allows specifying fields of which access type (public, protected etc.) will be included in the constructor.
            </summary>
            <param name="accessType">The access type of fields to include.</param>
        </member>
        <member name="M:Lombok.NET.RequiredArgsConstructorAttribute.#ctor(Lombok.NET.MemberType,Lombok.NET.AccessTypes)">
            <summary>
            Allows specifying members (fields or properties) of which access type (public, protected etc.) will be included in the constructor.
            </summary>
            <param name="memberType">The member type to include.</param>
            <param name="accessType">The access type of fields to include.</param>
        </member>
        <member name="T:Lombok.NET.ToStringAttribute">
            <summary>
            Tells Lombok.NET to generate a ToString implementation for this type. For enums, a ToText method will be added.
            </summary>
        </member>
        <member name="M:Lombok.NET.ToStringAttribute.#ctor">
            <summary>
            Empty constructor. Private fields will included in the ToString implementation.
            </summary>
        </member>
        <member name="M:Lombok.NET.ToStringAttribute.#ctor(Lombok.NET.MemberType)">
            <summary>
            Allows specifying which private members (fields or properties) will be included in the ToString implementation.
            </summary>
            <param name="memberType">The member type to include.</param>
        </member>
        <member name="M:Lombok.NET.ToStringAttribute.#ctor(Lombok.NET.AccessTypes)">
            <summary>
            Allows specifying fields of which access type (public, protected etc.) will be included in the ToString implementation.
            </summary>
            <param name="accessType">The access type of fields to include.</param>
        </member>
        <member name="M:Lombok.NET.ToStringAttribute.#ctor(Lombok.NET.MemberType,Lombok.NET.AccessTypes)">
            <summary>
            Allows specifying members (fields or properties) of which access type (public, protected etc.) will be included in the ToString implementation.
            </summary>
            <param name="memberType">The member type to include.</param>
            <param name="accessType">The access type of fields to include.</param>
        </member>
        <member name="T:Lombok.NET.NoArgsConstructorAttribute">
            <summary>
            Tells Lombok.NET to generate an empty constructor.
            </summary>
        </member>
        <member name="T:Lombok.NET.DecoratorAttribute">
            <summary>
            Tells Lombok.NET to generate a Decorator implementation for this type.
            </summary>
        </member>
        <member name="T:Lombok.NET.SingletonAttribute">
            <summary>
            Tells Lombok.NET to make the type a singleton and expose an Instance property.
            </summary>
        </member>
        <member name="T:Lombok.NET.LazyAttribute">
            <summary>
            Tells Lombok.NET to expose a <see cref="T:System.Lazy`1"/> property for the class.
            </summary>
        </member>
        <member name="T:Lombok.NET.WithAttribute">
            <summary>
            Tells Lombok.NET to generate With builder methods for this type. 
            </summary>
        </member>
        <member name="M:Lombok.NET.WithAttribute.#ctor">
            <summary>
            Empty constructor. With methods will be generated for non-readonly fields.
            </summary>
        </member>
        <member name="M:Lombok.NET.WithAttribute.#ctor(Lombok.NET.MemberType)">
            <summary>
            Allows specifying for which members (fields or properties) the With methods will be generated.
            </summary>
            <param name="memberType">The member type to include.</param>
        </member>
        <member name="T:Lombok.NET.PropertyAttribute">
            <summary>
            Tells Lombok.NET to generate a property for this field.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyAttribute.#ctor">
            <summary>
            Empty constructor. Generates a property with the field as the backing field.
            </summary>
        </member>
        <member name="M:Lombok.NET.PropertyAttribute.#ctor(Lombok.NET.PropertyChangeType)">
            <summary>
            Allows specifying which kind of change event should be raised when the property is set.
            </summary>
            <param name="propertyChangeType">The type of change event to raise when the property is set.</param>
        </member>
        <member name="T:Lombok.NET.NotifyPropertyChangedAttribute">
            <summary>
            Tells Lombok.NET to generate a INotifyPropertyChanged implementation for this class.
            </summary>
        </member>
        <member name="T:Lombok.NET.NotifyPropertyChangingAttribute">
            <summary>
            Tells Lombok.NET to generate a INotifyPropertyChanging implementation for this class.
            </summary>
        </member>
        <member name="T:Lombok.NET.AsyncOverloadsAttribute">
            <summary>
            Tells Lombok.NET to generate async overloads for method definitions (abstract or interface methods).
            </summary>
        </member>
        <member name="T:Lombok.NET.AsyncAttribute">
            <summary>
            Tells Lombok.NET to generate an async version for this method.
            </summary>
        </member>
        <member name="T:Lombok.NET.MemberType">
            <summary>
            The kind of members which Lombok.NET supports.
            </summary>
        </member>
        <member name="F:Lombok.NET.MemberType.Field">
            <summary>
            A C# field.
            </summary>
        </member>
        <member name="F:Lombok.NET.MemberType.Property">
            <summary>
            A C# property.
            </summary>
        </member>
        <member name="T:Lombok.NET.AccessTypes">
            <summary>
            The kinds of accesses Lombok.NET supports.
            </summary>
        </member>
        <member name="F:Lombok.NET.AccessTypes.Private">
            <summary>
            Associated with the private keyword.
            </summary>
        </member>
        <member name="F:Lombok.NET.AccessTypes.Protected">
            <summary>
            Associated with the protected keyword.
            </summary>
        </member>
        <member name="F:Lombok.NET.AccessTypes.Internal">
            <summary>
            Associated with the internal keyword.
            </summary>
        </member>
        <member name="F:Lombok.NET.AccessTypes.Public">
            <summary>
            Associated with the public keyword.
            </summary>
        </member>
        <member name="T:Lombok.NET.PropertyChangeType">
            <summary>
            The types of change events which can be raised by Lombok.NET
            </summary>
        </member>
        <member name="F:Lombok.NET.PropertyChangeType.PropertyChanged">
            <summary>
            After a property has changed.
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="F:Lombok.NET.PropertyChangeType.PropertyChanging">
            <summary>
            Before a property has changed.
            <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>
            </summary>
        </member>
        <member name="F:Lombok.NET.PropertyChangeType.ReactivePropertyChange">
            <summary>
            Property change handling as performed by the ReactiveUI library.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
